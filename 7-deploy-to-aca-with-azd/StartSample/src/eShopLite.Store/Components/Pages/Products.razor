@page "/products"
@inject IStoreService StoreService
@inject ILogger<Products> Logger
@inject IJSRuntime JSRuntime
@attribute [Microsoft.AspNetCore.OutputCaching.OutputCache(Duration = 10)]
@rendermode InteractiveServer

<PageTitle>Products - eShopLite</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="mb-1">
            <i class="bi bi-box-seam text-primary me-2"></i>Our Products
        </h1>
        <p class="text-muted mb-0">Discover our collection of premium outdoor gear</p>
    </div>
    <div class="d-flex gap-2">
        <button class="btn btn-outline-primary" @onclick="RefreshProducts" disabled="@isLoading">
            <i class="bi bi-arrow-clockwise me-1"></i>
            @if (isLoading) { <span>Loading...</span> } else { <span>Refresh</span> }
        </button>
        <div class="dropdown">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <i class="bi bi-funnel me-1"></i>View
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" @onclick="() => SetViewMode(ViewMode.Grid)" href="#">
                    <i class="bi bi-grid-3x3-gap me-2"></i>Grid View
                </a></li>
                <li><a class="dropdown-item" @onclick="() => SetViewMode(ViewMode.List)" href="#">
                    <i class="bi bi-list me-2"></i>List View
                </a></li>
            </ul>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @errorMessage
        <button type="button" class="btn-close" @onclick="ClearError" aria-label="Close"></button>
    </div>
}

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading products...</span>
        </div>
        <p class="mt-3 text-muted">Loading premium outdoor gear...</p>
    </div>
}
else if (products == null || !products.Any())
{
    <div class="text-center py-5">
        <i class="bi bi-box display-1 text-muted"></i>
        <h3 class="mt-3">No Products Available</h3>
        <p class="text-muted mb-4">We're currently updating our inventory. Please check back soon!</p>
        <button class="btn btn-primary btn-lg" @onclick="RefreshProducts">
            <i class="bi bi-arrow-clockwise me-2"></i>Try Again
        </button>
    </div>
}
else
{
    <div class="mb-3">
        <small class="text-muted">
            <i class="bi bi-info-circle me-1"></i>
            Showing @products.Count products | Last updated: @DateTime.Now.ToString("HH:mm:ss")
        </small>
    </div>

    @if (currentViewMode == ViewMode.Grid)
    {
        <div class="row g-4">
            @foreach (var product in products)
            {
                <div class="col-xl-3 col-lg-4 col-md-6">
                    <div class="card h-100 shadow-sm product-card">
                        <div class="position-relative overflow-hidden" style="height: 250px;">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="/Images/@product.ImageUrl" 
                                     alt="@product.Name" 
                                     class="card-img-top product-image w-100 h-100"
                                     style="object-fit: cover; transition: transform 0.3s ease;"
                                     loading="lazy"
                                     @onerror="@((args) => HandleImageError(args, product.Id))"
                                     @onload="@((args) => HandleImageLoad(args, product.Id))">
                            }
                            else
                            {
                                <div class="w-100 h-100 bg-light d-flex align-items-center justify-content-center">
                                    <i class="bi bi-image display-4 text-muted"></i>
                                </div>
                            }
                            <div class="position-absolute top-0 end-0 m-2">
                                <span class="badge bg-primary">#@product.Id</span>
                            </div>
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title text-truncate" title="@product.Name">@product.Name</h5>
                            <p class="card-text text-muted small flex-grow-1">
                                @(product.Description.Length > 100 ? 
                                  product.Description.Substring(0, 100) + "..." : 
                                  product.Description)
                            </p>
                            <div class="mt-auto">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="h5 text-success mb-0 fw-bold">$@product.Price.ToString("F2")</span>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewProductDetails(product)">
                                        <i class="bi bi-eye me-1"></i>View
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="list-group">
            @foreach (var product in products)
            {
                <div class="list-group-item list-group-item-action">
                    <div class="row align-items-center">
                        <div class="col-md-2">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="/Images/@product.ImageUrl" 
                                     alt="@product.Name" 
                                     class="img-fluid rounded"
                                     style="height: 80px; width: 80px; object-fit: cover;"
                                     loading="lazy">
                            }
                            else
                            {
                                <div class="bg-light rounded d-flex align-items-center justify-content-center" 
                                     style="height: 80px; width: 80px;">
                                    <i class="bi bi-image text-muted"></i>
                                </div>
                            }
                        </div>
                        <div class="col-md-6">
                            <h6 class="mb-1 fw-bold">@product.Name</h6>
                            <p class="mb-1 text-muted small">@product.Description</p>
                            <small class="text-muted">Product ID: #@product.Id</small>
                        </div>
                        <div class="col-md-2 text-center">
                            <span class="h5 text-success fw-bold">$@product.Price.ToString("F2")</span>
                        </div>
                        <div class="col-md-2 text-end">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewProductDetails(product)">
                                <i class="bi bi-eye me-1"></i>Details
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private List<Product>? products;
    private bool isLoading = true;
    private string? errorMessage;
    private ViewMode currentViewMode = ViewMode.Grid;

    public enum ViewMode
    {
        Grid,
        List
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            Logger.LogInformation("Loading products via Blazor component");
            products = (await StoreService.GetProductsAsync()).ToList();
            Logger.LogInformation("Successfully loaded {Count} products", products.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products in Blazor component");
            errorMessage = "Unable to load products at this time. Please try again later.";
            products = new List<Product>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshProducts()
    {
        await LoadProducts();
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    private void SetViewMode(ViewMode viewMode)
    {
        currentViewMode = viewMode;
    }

    private async Task ViewProductDetails(Product product)
    {
        await JSRuntime.InvokeVoidAsync("alert", 
            $"Product: {product.Name}\nPrice: ${product.Price:F2}\nDescription: {product.Description}");
    }

    private void HandleImageError(Microsoft.AspNetCore.Components.Web.ErrorEventArgs args, int productId)
    {
        Logger.LogWarning("Failed to load image for product {ProductId}", productId);
    }

    private void HandleImageLoad(Microsoft.AspNetCore.Components.Web.ProgressEventArgs args, int productId)
    {
        Logger.LogDebug("Successfully loaded image for product {ProductId}", productId);
    }
}

<style>
    .product-card {
        transition: all 0.3s ease;
        border: 1px solid rgba(0,0,0,.125);
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,.15) !important;
    }

    .product-card:hover .product-image {
        transform: scale(1.05);
    }

    .list-group-item {
        transition: background-color 0.2s ease;
    }

    .list-group-item:hover {
        background-color: rgba(0,123,255,.05);
    }
</style>