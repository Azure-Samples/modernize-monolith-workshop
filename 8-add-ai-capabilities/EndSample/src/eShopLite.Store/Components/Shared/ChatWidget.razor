@using eShopLite.Store.Models
@using eShopLite.Store.Services
@inject IChatbotService ChatbotService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<!-- Chat Widget -->
<div style="position: fixed; bottom: 20px; right: 20px; z-index: 9999; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;">
    
    <!-- Chat Window -->
    @if (isExpanded)
    {
        <div style="
            position: absolute;
            bottom: 90px;
            right: 0;
            width: 400px;
            height: 550px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            animation: slideUp 0.3s ease-out;
            max-width: calc(100vw - 40px);
            max-height: calc(100vh - 120px);
        " class="chat-window">
            <!-- Header -->
            <div style="
                background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                color: white;
                padding: 16px 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-radius: 12px 12px 0 0;
            ">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <i class="bi bi-robot" style="font-size: 18px;"></i>
                    <div>
                        <div style="font-weight: 600; font-size: 14px;">AI Assistant</div>
                        <div style="font-size: 11px; opacity: 0.9;">Online • Ask me anything!</div>
                    </div>
                </div>
                <div style="display: flex; gap: 8px;">
                    <button @onclick="ClearChat" style="
                        background: none;
                        border: none;
                        color: white;
                        cursor: pointer;
                        padding: 4px;
                        border-radius: 4px;
                        opacity: 0.8;
                        font-size: 14px;
                    " title="Clear chat">
                        <i class="bi bi-trash"></i>
                    </button>
                    <button @onclick="ToggleChat" style="
                        background: none;
                        border: none;
                        color: white;
                        cursor: pointer;
                        padding: 4px;
                        border-radius: 4px;
                        opacity: 0.8;
                        font-size: 14px;
                    " title="Close">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
            </div>

            <!-- Messages Container -->
            <div @ref="messagesContainer" style="
                flex: 1;
                overflow-y: auto;
                padding: 16px;
                background: #f8f9fa;
                display: flex;
                flex-direction: column;
                gap: 12px;
            ">
                @if (!chatMessages.Any())
                {
                    <div style="
                        text-align: center;
                        color: #6c757d;
                        margin-top: 40px;
                        padding: 20px;
                    ">
                        <i class="bi bi-chat-heart" style="font-size: 48px; color: #28a745; margin-bottom: 16px;"></i>
                        <div style="font-weight: 500; margin-bottom: 8px;">Welcome to eShopLite!</div>
                        <div style="font-size: 13px;">Ask me about our outdoor gear, store locations, or anything else.</div>
                        
                        <!-- Quick Actions -->
                        <div style="margin-top: 20px; display: flex; flex-direction: column; gap: 8px;">
                            <button @onclick='() => SendQuickMessage("What products do you have?")' style="
                                background: white;
                                border: 1px solid #e9ecef;
                                padding: 8px 12px;
                                border-radius: 20px;
                                cursor: pointer;
                                font-size: 12px;
                                color: #495057;
                                transition: all 0.2s;
                            " onmouseover="this.style.backgroundColor='#f8f9fa'" onmouseout="this.style.backgroundColor='white'">
                                ??? What products do you have?
                            </button>
                            <button @onclick='() => SendQuickMessage("Where are your stores?")' style="
                                background: white;
                                border: 1px solid #e9ecef;
                                padding: 8px 12px;
                                border-radius: 20px;
                                cursor: pointer;
                                font-size: 12px;
                                color: #495057;
                                transition: all 0.2s;
                            " onmouseover="this.style.backgroundColor='#f8f9fa'" onmouseout="this.style.backgroundColor='white'">
                                ?? Store locations
                            </button>
                            <button @onclick='() => SendQuickMessage("I need hiking gear recommendations")' style="
                                background: white;
                                border: 1px solid #e9ecef;
                                padding: 8px 12px;
                                border-radius: 20px;
                                cursor: pointer;
                                font-size: 12px;
                                color: #495057;
                                transition: all 0.2s;
                            " onmouseover="this.style.backgroundColor='#f8f9fa'" onmouseout="this.style.backgroundColor='white'">
                                ?? Gear recommendations
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    @foreach (var message in chatMessages)
                    {
                        <div style="
                            display: flex;
                            justify-content: @(message.IsUser ? "flex-end" : "flex-start");
                            margin-bottom: 8px;
                        ">
                            <div style="
                                max-width: 85%;
                                padding: 12px 16px;
                                border-radius: @(message.IsUser ? "18px 18px 4px 18px" : "18px 18px 18px 4px");
                                background: @(message.IsUser ? "#007bff" : "white");
                                color: @(message.IsUser ? "white" : "#333");
                                font-size: 14px;
                                line-height: 1.4;
                                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                                word-wrap: break-word;
                                overflow-wrap: break-word;
                            ">
                                @message.Content
                                <div style="
                                    font-size: 11px;
                                    opacity: 0.7;
                                    margin-top: 4px;
                                    text-align: right;
                                ">
                                    @message.Timestamp.ToString("HH:mm")
                                </div>
                            </div>
                        </div>
                    }
                }

                @if (isLoading)
                {
                    <div style="display: flex; justify-content: flex-start;">
                        <div style="
                            background: white;
                            padding: 12px 16px;
                            border-radius: 18px 18px 18px 4px;
                            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                            display: flex;
                            align-items: center;
                            gap: 8px;
                        ">
                            <div style="
                                display: flex;
                                gap: 4px;
                                align-items: center;
                            ">
                                <div style="
                                    width: 8px;
                                    height: 8px;
                                    background: #6c757d;
                                    border-radius: 50%;
                                    animation: typing 1.4s infinite;
                                "></div>
                                <div style="
                                    width: 8px;
                                    height: 8px;
                                    background: #6c757d;
                                    border-radius: 50%;
                                    animation: typing 1.4s infinite;
                                    animation-delay: 0.2s;
                                "></div>
                                <div style="
                                    width: 8px;
                                    height: 8px;
                                    background: #6c757d;
                                    border-radius: 50%;
                                    animation: typing 1.4s infinite;
                                    animation-delay: 0.4s;
                                "></div>
                            </div>
                            <span style="font-size: 12px; color: #6c757d;">AI is thinking...</span>
                        </div>
                    </div>
                }
            </div>

            <!-- Input Area -->
            <div style="
                padding: 16px;
                background: white;
                border-top: 1px solid #e9ecef;
                border-radius: 0 0 12px 12px;
            ">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div style="
                        background: #f8d7da;
                        color: #721c24;
                        padding: 8px 12px;
                        border-radius: 6px;
                        font-size: 12px;
                        margin-bottom: 12px;
                        border: 1px solid #f5c6cb;
                    ">
                        <i class="bi bi-exclamation-triangle me-1"></i>
                        @errorMessage
                    </div>
                }
                
                <div style="display: flex; gap: 8px; align-items: flex-end;">
                    <div style="flex: 1; position: relative;">
                        <textarea @bind="currentMessage" 
                                  @onkeypress="HandleKeyPress"
                                  @oninput="HandleInput"
                                  disabled="@isLoading"
                                  placeholder="Type your message..."
                                  maxlength="500"
                                  rows="1"
                                  style="
                                      width: 100%;
                                      border: 1px solid #dee2e6;
                                      border-radius: 20px;
                                      padding: 10px 50px 10px 16px;
                                      font-size: 14px;
                                      resize: none;
                                      outline: none;
                                      font-family: inherit;
                                      line-height: 1.4;
                                      max-height: 100px;
                                      overflow-y: auto;
                                      transition: border-color 0.2s;
                                      background: @(isLoading ? "#f8f9fa" : "white");
                                      box-sizing: border-box;
                                  "></textarea>
                        <div style="
                            position: absolute;
                            right: 12px;
                            bottom: 8px;
                            font-size: 11px;
                            color: @(currentMessage.Length > 450 ? "#dc3545" : "#6c757d");
                            pointer-events: none;
                        ">
                            @currentMessage.Length/500
                        </div>
                    </div>
                    <button @onclick="SendMessage" 
                            disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage) || currentMessage.Length > 500)"
                            style="
                                background: @(isLoading || string.IsNullOrWhiteSpace(currentMessage) || currentMessage.Length > 500 ? "#e9ecef" : "#28a745");
                                color: @(isLoading || string.IsNullOrWhiteSpace(currentMessage) || currentMessage.Length > 500 ? "#6c757d" : "white");
                                border: none;
                                border-radius: 50%;
                                width: 40px;
                                height: 40px;
                                cursor: @(isLoading || string.IsNullOrWhiteSpace(currentMessage) || currentMessage.Length > 500 ? "not-allowed" : "pointer");
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-size: 16px;
                                transition: all 0.2s;
                                flex-shrink: 0;
                            ">
                        @if (isLoading)
                        {
                            <i class="bi bi-hourglass-split" style="animation: spin 1s linear infinite;"></i>
                        }
                        else
                        {
                            <i class="bi bi-send"></i>
                        }
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- Floating Button -->
    <button @onclick="ToggleChat" style="
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        box-shadow: 0 4px 20px rgba(40, 167, 69, 0.4);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        transform: @(isExpanded ? "rotate(0deg)" : "rotate(0deg)");
    " class="chat-button"
    onmouseover="this.style.transform='scale(1.1)'" 
    onmouseout="this.style.transform='scale(1)'">
        
        @if (isExpanded)
        {
            <i class="bi bi-x-lg"></i>
        }
        else
        {
            <i class="bi bi-chat-dots"></i>
            @if (hasUnreadMessage)
            {
                <div style="
                    position: absolute;
                    top: 10px;
                    right: 10px;
                    width: 12px;
                    height: 12px;
                    background: #dc3545;
                    border-radius: 50%;
                    border: 2px solid white;
                    animation: pulse 2s infinite;
                "></div>
            }
        }
    </button>
</div>

@code {
    private List<ChatMessage> chatMessages = new();
    private string currentMessage = "";
    private string? sessionId = Guid.NewGuid().ToString();
    private bool isLoading = false;
    private string? errorMessage;
    private bool isExpanded = false;
    private bool hasUnreadMessage = false;
    private ElementReference messagesContainer;

    protected override async Task OnInitializedAsync()
    {
        // Load existing chat history if any
        if (!string.IsNullOrEmpty(sessionId))
        {
            var history = await ChatbotService.GetChatHistoryAsync(sessionId);
            chatMessages = history.ToList();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isExpanded)
        {
            await ScrollToBottom();
        }
    }

    private void ToggleChat()
    {
        isExpanded = !isExpanded;
        if (isExpanded)
        {
            hasUnreadMessage = false;
        }
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading || currentMessage.Length > 500)
            return;

        await SendQuickMessage(currentMessage);
    }

    private async Task SendQuickMessage(string message)
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = null;
        var messageToSend = message;
        currentMessage = "";
        StateHasChanged();

        try
        {
            var request = new ChatRequest
            {
                Message = messageToSend,
                SessionId = sessionId
            };

            var response = await ChatbotService.SendMessageAsync(request);
            
            if (response.IsSuccessful)
            {
                sessionId = response.SessionId;
                
                // Reload chat history to get the latest messages
                var history = await ChatbotService.GetChatHistoryAsync(sessionId!);
                chatMessages = history.ToList();

                // Show notification if chat is closed
                if (!isExpanded)
                {
                    hasUnreadMessage = true;
                }
            }
            else
            {
                errorMessage = response.ErrorMessage ?? "Failed to send message";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !isLoading && !string.IsNullOrWhiteSpace(currentMessage) && currentMessage.Length <= 500)
        {
            await SendMessage();
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "";
        currentMessage = value;
        StateHasChanged();
    }

    private async Task ClearChat()
    {
        if (!string.IsNullOrEmpty(sessionId))
        {
            await ChatbotService.ClearChatHistoryAsync(sessionId);
            chatMessages.Clear();
            errorMessage = null;
            hasUnreadMessage = false;
            StateHasChanged();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(50); // Small delay to ensure DOM is updated
            await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
        }
        catch
        {
            // Ignore JS errors
        }
    }
}

<style>
    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes typing {
        0%, 60%, 100% {
            transform: scale(0.8);
            opacity: 0.5;
        }
        30% {
            transform: scale(1);
            opacity: 1;
        }
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 1;
        }
        50% {
            transform: scale(1.2);
            opacity: 0.7;
        }
        100% {
            transform: scale(1);
            opacity: 1;
        }
    }

    /* Mobile responsive */
    @@media (max-width: 480px) {
        .chat-window {
            width: calc(100vw - 20px) !important;
            right: 10px !important;
            left: 10px !important;
            bottom: 80px !important;
            max-height: calc(100vh - 100px) !important;
        }
        
        .chat-button {
            right: 10px !important;
            bottom: 10px !important;
            width: 60px !important;
            height: 60px !important;
            font-size: 20px !important;
        }
    }

    @@media (max-width: 768px) {
        .chat-window {
            width: calc(100vw - 30px) !important;
            right: 15px !important;
            height: calc(100vh - 140px) !important;
            max-height: calc(100vh - 140px) !important;
        }
    }
</style>

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>