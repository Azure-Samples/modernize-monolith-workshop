@page "/chat"
@using eShopLite.Store.Models
@using eShopLite.Store.Services
@inject IChatbotService ChatbotService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>AI Assistant - eShopLite</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="text-primary">
                    <i class="bi bi-robot me-2"></i>
                    AI Assistant
                </h1>
                <button class="btn btn-outline-secondary" @onclick="ClearChat">
                    <i class="bi bi-trash me-1"></i>Clear Chat
                </button>
            </div>
        </div>
    </div>
    
    <div class="row justify-content-center">
        <div class="col-lg-8 col-xl-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-chat-dots me-2"></i>
                        Chat with our AI Assistant
                    </h5>
                    <small>Ask me about products, store locations, or outdoor gear advice!</small>
                </div>
                
                <div class="card-body p-0">
                    <!-- Chat Messages -->
                    <div class="chat-container" style="height: 400px; overflow-y: auto; padding: 1rem;" @ref="chatContainer">
                        @if (!chatMessages.Any())
                        {
                            <div class="text-center text-muted mt-5">
                                <i class="bi bi-chat-text" style="font-size: 3rem;"></i>
                                <p class="mt-3">Start a conversation! Ask me about our outdoor gear, store locations, or anything else.</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var message in chatMessages)
                            {
                                <div class="mb-3 @(message.IsUser ? "text-end" : "")">
                                    <div class="d-inline-block @(message.IsUser ? "bg-primary text-white" : "bg-light") p-3 rounded-3" 
                                         style="max-width: 80%;">
                                        <div class="fw-bold mb-1">
                                            @if (message.IsUser)
                                            {
                                                <i class="bi bi-person-fill me-1"></i>@("You")
                                            }
                                            else
                                            {
                                                <i class="bi bi-robot me-1"></i>@("AI Assistant")
                                            }
                                        </div>
                                        <div>@message.Content</div>
                                        <small class="opacity-75 d-block mt-1">
                                            @message.Timestamp.ToString("HH:mm")
                                        </small>
                                    </div>
                                </div>
                            }
                        }
                        
                        @if (isLoading)
                        {
                            <div class="mb-3">
                                <div class="d-inline-block bg-light p-3 rounded-3">
                                    <div class="fw-bold mb-1">
                                        <i class="bi bi-robot me-1"></i>AI Assistant
                                    </div>
                                    <div class="typing-indicator">
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="card-footer">
                    <!-- Message Input -->
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Type your message..." 
                               @bind="currentMessage" @onkeypress="HandleKeyPress" disabled="@isLoading" />
                        <button class="btn btn-primary" type="button" @onclick="SendMessage" disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-send me-1"></i>
                            }
                            Send
                        </button>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-2 mb-0">
                            <i class="bi bi-exclamation-triangle me-1"></i>
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
            
            <!-- Quick Actions -->
            <div class="mt-4">
                <h6 class="text-muted mb-3">Quick Questions:</h6>
                <div class="d-flex flex-wrap gap-2">
                    <button class="btn btn-outline-primary btn-sm" @onclick='() => SendQuickMessage("What products do you have?")'>
                        What products do you have?
                    </button>
                    <button class="btn btn-outline-primary btn-sm" @onclick='() => SendQuickMessage("Where are your stores located?")'>
                        Store locations
                    </button>
                    <button class="btn btn-outline-primary btn-sm" @onclick='() => SendQuickMessage("What are your store hours?")'>
                        Store hours
                    </button>
                    <button class="btn btn-outline-primary btn-sm" @onclick='() => SendQuickMessage("I need camping gear recommendations")'>
                        Camping gear help
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> chatMessages = new();
    private string currentMessage = "";
    private string? sessionId = Guid.NewGuid().ToString();
    private bool isLoading = false;
    private string? errorMessage;
    private ElementReference chatContainer;

    protected override async Task OnInitializedAsync()
    {
        // Load existing chat history if any
        if (!string.IsNullOrEmpty(sessionId))
        {
            var history = await ChatbotService.GetChatHistoryAsync(sessionId);
            chatMessages = history.ToList();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await ScrollToBottom();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;

        await SendQuickMessage(currentMessage);
    }

    private async Task SendQuickMessage(string message)
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = null;
        var messageToSend = message;
        currentMessage = "";
        StateHasChanged();

        try
        {
            var request = new ChatRequest
            {
                Message = messageToSend,
                SessionId = sessionId
            };

            var response = await ChatbotService.SendMessageAsync(request);
            
            if (response.IsSuccessful)
            {
                sessionId = response.SessionId;
                
                // Reload chat history to get the latest messages
                var history = await ChatbotService.GetChatHistoryAsync(sessionId!);
                chatMessages = history.ToList();
            }
            else
            {
                errorMessage = response.ErrorMessage ?? "Failed to send message";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task ClearChat()
    {
        if (!string.IsNullOrEmpty(sessionId))
        {
            await ChatbotService.ClearChatHistoryAsync(sessionId);
            chatMessages.Clear();
            errorMessage = null;
            StateHasChanged();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
        }
        catch
        {
            // Ignore JS errors
        }
    }
}

<style>
    .chat-container {
        background: #fafafa;
    }

    .typing-indicator {
        display: inline-flex;
        align-items: center;
    }

    .typing-indicator span {
        height: 8px;
        width: 8px;
        background-color: #999;
        border-radius: 50%;
        display: inline-block;
        margin-right: 3px;
        animation: typing-animation 1.4s infinite ease-in-out;
    }

    .typing-indicator span:nth-child(1) {
        animation-delay: -0.32s;
    }

    .typing-indicator span:nth-child(2) {
        animation-delay: -0.16s;
    }

    .btn-sm {
        font-size: 0.8rem;
    }
</style>

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>